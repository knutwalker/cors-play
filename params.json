{"name":"Cors-play","tagline":"Easy CORS support for Play","body":"# CORS Play\r\n\r\n[![Build Status](https://travis-ci.org/knutwalker/cors-play.png?branch=master&1)](https://travis-ci.org/knutwalker/cors-play)\r\n[![Coverage Status](https://coveralls.io/repos/knutwalker/cors-play/badge.png?branch=master&1)](https://coveralls.io/r/knutwalker/cors-play?branch=master)\r\n\r\n\r\nEasy CORS integration for Play:\r\n\r\n - use CORS with your Playframework application\r\n - No additional controllers or routes required\r\n\r\n\r\n## Installation\r\n\r\n### Stable Version\r\n\r\nAdd this to your play build/sbt\r\n\r\n    libraryDependencies ++= Seq(\r\n      \"de.knutwalker\" %% \"cors-play\" % \"0.1.0\"\r\n    )\r\n\r\n### Snapshot Version\r\n\r\n    resolvers += \"Sonatype snapshots\" at \"http://oss.sonatype.org/content/repositories/snapshots/\"\r\n\r\n    libraryDependencies ++= Seq(\r\n      \"de.knutwalker\" %% \"cors-play\" % \"0.1.1-SNAPSHOT\"\r\n    )\r\n\r\n\r\n## Usage\r\n\r\nYou have to mixin the `CorsSupport` trait into your `Global` object\r\n\r\n```scala\r\nimport de.knutwalker.play.cors.{ CorsStrategy, CorsSupport }\r\nimport play.api.GlobalSettings\r\n\r\nobject Global extends GlobalSettings with CorsSupport {\r\n\r\n  override val corsStrategy = CorsStrategy.Everyone\r\n}\r\n```\r\n\r\nYou can choose different a `CorsStrategy` to customize the behavior\r\n\r\n`CorsStrategy` | Behaviour\r\n-------------- | -------------\r\n`Everyone`     | Allow every request, event malformed (not CORS) ones\r\n`Origin`       | Allow requests with the `Origin` header set. For valid CORS requests, this is the same as `Everyone`.\r\n`NoOne`        | Do not allow any requests\r\n`Localhost`    | Only allow requests from localhost\r\n`Localhost([ports])`   | Only allow requests from localhost that originate from a given list of ports\r\n`Fixed([origins])`     | Provide a fixed set of allowed origins. This results in white-listing behaviour on the browser-side (as the origins are sent as is)\r\n`WhiteList([origins])` | Provide a white list of origins, that are allow to make a CORS request. The list is resolved on server-side, only the white-listed origin is sent in the header.\r\n`BlackList([origins])` | Provide a black list of origins, that are *not* allowed to make CORS requests. The list is resolved on server-side, only the not-black-listed origin is sent in the header.\r\n`Satisfies(handler)`    | Define a custom check, that return `true` for allowed requests, and `false` otherwise. (Sent origin will be `*`)\r\n`Satisfies(handler).allowing(origin)` | Define a custom check, that return `true` for allowed requests, and `false` otherwise. (Sent origin will be `origin`)\r\n`Satisfies(handler).withOrigin`       | Define a custom check, that return `true` for allowed requests, and `false` otherwise. (Sent origin will be the value from the `Origin` header)\r\n`CustomPF(handler)`   | Define a custom check as a partial function, that will match and return an origin for allowed requests, and won't match otherwise\r\n`Custom(handler)`     | Define a custom check, that will return `Some(origin)` for allowed requests, and `None` otherwise.\r\n\r\n\r\n### License\r\n\r\nThis software is released under the MIT Licence\r\n\r\nhttp://knutwalker.mit-license.org/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}